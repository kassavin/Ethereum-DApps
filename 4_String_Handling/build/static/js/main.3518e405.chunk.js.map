{"version":3,"sources":["ReadString.js","SetString.js","App.js","index.js"],"names":["ReadString","state","dataKey","this","props","drizzle","contracts","MyStringStore","methods","cacheCall","setState","myString","drizzleState","value","React","Component","SetString","stackId","handleKeyDown","e","keyCode","setValue","target","cacheSend","from","accounts","getTxStatus","transactions","txHash","transactionStack","status","type","onKeyDown","App","loading","unsubscribe","store","subscribe","getState","drizzleStatus","initialized","className","options","web3","fallback","url","Drizzle","ReactDOM","render","document","getElementById"],"mappings":"6igBA4BeA,E,4MAzBbC,MAAQ,CAAEC,QAAS,M,kEAEE,IAKbA,EAJcC,KAAKC,MAAjBC,QACiBC,UAAUC,cAGVC,QAAT,SAA6BC,YAG7CN,KAAKO,SAAS,CAAER,c,+BAGT,IAKDS,EAHoBR,KAAKC,MAAMQ,aAAaN,UAA1CC,cAGuBI,SAASR,KAAKF,MAAMC,SAGnD,OAAO,gDAAsBS,GAAYA,EAASE,W,GAtB7BC,IAAMC,WC6ChBC,E,4MA5Cbf,MAAQ,CAAEgB,QAAS,M,EAEnBC,cAAgB,SAAAC,GAEI,KAAdA,EAAEC,SACJ,EAAKC,SAASF,EAAEG,OAAOT,Q,EAI3BQ,SAAW,SAAAR,GAAU,IAAD,EACgB,EAAKT,MAA/BC,EADU,EACVA,QAASO,EADC,EACDA,aAIXK,EAHWZ,EAAQC,UAAUC,cAGVC,QAAT,IAAwBe,UAAUV,EAAO,CAACW,KAAMZ,EAAaa,SAAS,KAGtF,EAAKf,SAAS,CAAEO,a,EAGlBS,YAAc,WAAM,MAEyB,EAAKtB,MAAMQ,aAA9Ce,EAFU,EAEVA,aAGFC,EALY,EAEIC,iBAGU,EAAK5B,MAAMgB,SAG3C,OAAKW,EAGC,uBAAN,OAA8BD,EAAaC,IAAWD,EAAaC,GAAQE,QAHvD,M,uDAOpB,OACE,6BACE,2BAAOC,KAAK,OAAOC,UAAW7B,KAAKe,gBACnC,6BAAMf,KAAKuB,oB,GAvCKZ,IAAMC,WCgDfkB,G,mNA1CbhC,MAAQ,CAAEiC,SAAS,EAAMtB,aAAc,M,kEAElB,IAAD,OACVP,EAAYF,KAAKC,MAAjBC,QAGRF,KAAKgC,YAAc9B,EAAQ+B,MAAMC,WAAU,WAGzC,IAAMzB,EAAeP,EAAQ+B,MAAME,WAG/B1B,EAAa2B,cAAcC,aAC7B,EAAK9B,SAAS,CAAEwB,SAAS,EAAOtB,sB,6CAOpCT,KAAKgC,gB,+BAIL,OAAIhC,KAAKF,MAAMiC,QAAgB,qBAE7B,yBAAKO,UAAU,OACf,6BACE,kBAAC,EAAD,CACEpC,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,eAE3B,kBAAC,EAAD,CACEP,QAASF,KAAKC,MAAMC,QACpBO,aAAcT,KAAKF,MAAMW,oB,GApCjBG,c,kBCKZ2B,EAAU,CACdpC,UAAW,C,QACXqC,KAAM,CACJC,SAAU,CACRb,KAAM,KACNc,IAAK,yBAMLxC,EAAU,IAAIyC,UAAQJ,GAE5BK,IAASC,OAAO,kBAAC,EAAD,CAAK3C,QAASA,IAAa4C,SAASC,eAAe,W","file":"static/js/main.3518e405.chunk.js","sourcesContent":["import React from \"react\";\n\nclass ReadString extends React.Component {\n  state = { dataKey: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to watch the `myString` method\n    const dataKey = contract.methods[\"myString\"].cacheCall();\n\n    // save the `dataKey` to local component state for later reference\n    this.setState({ dataKey });\n  }\n\n  render() {\n    // get the contract state from drizzleState\n    const { MyStringStore } = this.props.drizzleState.contracts;\n\n    // using the saved `dataKey`, get the variable we're interested in\n    const myString = MyStringStore.myString[this.state.dataKey];\n\n    // if it exists, then we display its value\n    return <p>My stored string: {myString && myString.value}</p>;\n  }\n}\n\nexport default ReadString;","import React from \"react\";\n\nclass SetString extends React.Component {\n  state = { stackId: null };\n\n  handleKeyDown = e => {\n    // if the enter key is pressed, set the value with the string\n    if (e.keyCode === 13) {\n      this.setValue(e.target.value);\n    }\n  };\n\n  setValue = value => {\n    const { drizzle, drizzleState } = this.props;\n    const contract = drizzle.contracts.MyStringStore;\n\n    // let drizzle know we want to call the `set` method with `value`\n    const stackId = contract.methods[\"set\"].cacheSend(value, {from: drizzleState.accounts[0]});\n\n    // save the `stackId` for later reference\n    this.setState({ stackId });\n  };\n\n  getTxStatus = () => {\n    // get the transaction states from the drizzle state\n    const { transactions, transactionStack } = this.props.drizzleState;\n\n    // get the transaction hash using our saved `stackId`\n    const txHash = transactionStack[this.state.stackId];\n\n    // if transaction hash does not exist, don't display anything\n    if (!txHash) return null;\n\n    // otherwise, return the transaction status\n    return `Transaction status: ${transactions[txHash] && transactions[txHash].status}`;\n  };\n\n  render() {\n    return (\n      <div>\n        <input type=\"text\" onKeyDown={this.handleKeyDown} />\n        <div>{this.getTxStatus()}</div>\n      </div>\n    );\n  }\n}\n\nexport default SetString;","import React, { Component } from \"react\";\nimport ReadString from \"./ReadString\";\nimport SetString from \"./SetString\";\n\nimport './App.css';\n\nclass App extends Component {\n\n  state = { loading: true, drizzleState: null };\n\n  componentDidMount() {\n    const { drizzle } = this.props;\n\n    // subscribe to changes in the store\n    this.unsubscribe = drizzle.store.subscribe(() => {\n\n      // every time the store updates, grab the state from drizzle\n      const drizzleState = drizzle.store.getState();\n\n      // check to see if it's ready, if so, update local component state\n      if (drizzleState.drizzleStatus.initialized) {\n        this.setState({ loading: false, drizzleState });\n      }\n\n    });\n  }\n\n  componentWillUnmount() {\n    this.unsubscribe();\n  }\n\n  render() {\n    if (this.state.loading) return \"Loading Drizzle...\";\n    return (\n      <div className=\"App\">\n      <br/>\n        <ReadString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n        <SetString\n          drizzle={this.props.drizzle}\n          drizzleState={this.state.drizzleState}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\n// import drizzle functions and contract artifact\nimport {Drizzle} from \"@drizzle/store\";\nimport MyStringStore from \"./contracts/MyStringStore.json\";\n\n// let drizzle know what contracts we want and how to access our test blockchain\nconst options = {\n  contracts: [MyStringStore],\n  web3: {\n    fallback: {\n      type: \"ws\",\n      url: \"ws://127.0.0.1:7545\",\n    },\n  },\n};\n\n// setup the drizzle store and drizzle\nconst drizzle = new Drizzle(options);\n\nReactDOM.render(<App drizzle={drizzle} />, document.getElementById('root'));\n\n\n\n\n\n\n\n"],"sourceRoot":""}